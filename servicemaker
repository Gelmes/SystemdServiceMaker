#!/bin/bash

if [[ $# -eq 0 ]] ; then
cat << EOM
Usage: servicemaker [OPTIONS]...
Automatically create and start a systemd unit file from a template.

Options:   
    -m, --name          Service name
    -a, --application   Application location
    -d, --description   Description of application
    -w, --directory     Working Directory of application (no spaces!)
    -r, --restart       Restart interval in seconds (default: 10)
    -u, --user          User execution level (default: root!)
EOM
exit 0
fi

NAME="Default"
APP="None"
DESCRIPTION="Default Description"
DIRECTORY="/home/"
RESTART=10
SERVICES="/usr/lib/systemd/system"
USER_LEVEL=$USER

PARAMS=""
while (( "$#" )); do
    case "$1" in
        # -a|--my-boolean-flag)
        #   MY_FLAG=0
        #   shift
        #   ;;
        -n|--name)
            if [ -n "$2" ] && [ ${2:0:1} != "-" ]; then
            NAME=$2
            shift 2
            else
            echo "Error: Argument for $1 is missing" >&2
            exit 1
            fi
            ;;
        -a|--application)
            if [ -n "$2" ] && [ ${2:0:1} != "-" ]; then
            APP=$2
            shift 2
            else
            echo "Error: Argument for $1 is missing" >&2
            exit 1
            fi
            ;;
        -d|--description)
            if [ -n "$2" ] && [ ${2:0:1} != "-" ]; then
            DESCRIPTION=$2
            shift 2
            else
            echo "Error: Argument for $1 is missing" >&2
            exit 1
            fi
            ;;
        -w|--directory)
            if [ -n "$2" ] && [ ${2:0:1} != "-" ]; then
            DIRECTORY=$2
            shift 2
            else
            echo "Error: Argument for $1 is missing" >&2
            exit 1
            fi
            ;;
        -r|--restart)
            if [ -n "$2" ] && [ ${2:0:1} != "-" ]; then
            RESTART=$2
            shift 2
            else
            echo "Error: Argument for $1 is missing" >&2
            exit 1
            fi
            ;;
        -u|--user)
            if [ -n "$2" ] && [ ${2:0:1} != "-" ]; then
            USER_LEVEL=$2
            shift 2
            else
            echo "Error: Argument for $1 is missing" >&2
            exit 1
            fi
            ;;
        -*|--*=) # unsupported flags
            echo "Error: Unsupported flag $1" >&2
            exit 1
            ;;
        *) # preserve positional arguments
            PARAMS="$PARAMS $1"
            shift
            ;;
    esac
done 

# set positional arguments in their proper place
eval set -- "$PARAMS"

echo ""
echo "Name              = ${NAME}"
echo "User              = ${USER_LEVEL}"
echo "Application       = ${APP}"
echo "Description       = ${DESCRIPTION}"
echo "Working Directory = ${DIRECTORY}"
echo "Restart Seconds   = ${RESTART}"
echo ""

SERVICE=$SERVICES/$NAME.service

FILE=$SERVICE
if test -f "$FILE"; then
    read -p "$NAME.service already exists, overwrite [y/N]? " -r
    echo    # (optional) move to a new line
    if [[ $REPLY =~ ^[Yy]$ ]]
    then
        echo "Overwriting $NAME.service"
        systemctl stop $NAME.service
        systemctl disable $NAME.service
        rm -f $SERVICE
    else
        echo "Nothing to do exiting"
        exit 1
    fi
fi

# Just in case there is spaces in the working directory escape them 
# Due to a bug in systemd direcotries cannot simply be quoted around
DIR_ESCAPED=$(systemd-escape --path "$DIRECTORY") # NOTE: not in use since it does not seem to work in every case

cat > $SERVICE << EOM
[Unit]
Description=$DESCRIPTION
[Service]
Type=simple
PIDFile=/run/$NAME.pid
# Step 1 and Step 2 details are here..
# ------------------------------------
ExecStart="$APP"
User=$USER_LEVEL
Group=$USER_LEVEL
WorkingDirectory=$DIRECTORY
Restart=always
RestartSec=10
#KillMode=mixed
[Install]
WantedBy=multi-user.target
EOM

systemctl enable $NAME.service
systemctl start $NAME.service

echo ""

cat << EOM
Check the status of your application with the fallowing commands:

systemctl status $NAME.service  # Shows the status of your service
systemctl enable $NAME.service  # Enables your service
systemctl disable $NAME.serivce # Disables your service
systemctl start $NAME.service   # Starts your service
systemctl stop $NAME.service    # Stops your service

journalctl -u $NAME.service     # Shows logs
journalctl -u $NAME.service -f  # Automatically fallows logs
EOM

echo ""
